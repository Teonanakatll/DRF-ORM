from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from bot.filters.chat_types import ChatTypeFilter
from aiogram.utils.formatting import as_list, as_marked_section, Bold


from bot.kbds import reply
from bot.kbds.reply import test_kb
from gpt4.utils import cons

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

# –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@user_private_router.message(CommandStart())
# async - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram API) –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
async def start_smd(message: types.Message):
    # –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞ —á–µ—Ä–µ–∑ ReplyKeyboardBuilder, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º
    # –º–µ—Ç–æ–¥ as_markup() –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await message.answer('–ü—Ä–∏–≤–µ—Ç —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!', reply_markup=reply.start_kb3.as_markup(
                                                resize_keyboard=True, input_field_placeholder='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'))

# @user_private_router.message(F.text.lower() == '–º–µ–Ω—é')
# –ø—Ä–µ—Ñ–∏–∫—Å '/' - –≤ Comand() —É–∫–∞–∑–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–ª—É–∂–∏—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è –ò–õ–ò, —á—Ç–æ–±—ã –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
# –∏ –∫–æ–º–∞–Ω–¥—É –∏ —Ñ–∏–ª—å—Ç—Ä—ã
@user_private_router.message(or_f(Command('menu'), (F.text.lower() == '–º–µ–Ω—é')))
async def menu_cmd(message: types.Message):
    # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ–Ω—é
    await message.answer('–í–æ—Ç –º–µ–Ω—é:', reply_markup=reply.del_kbd)

mag = ['–û –º–∞–≥–∞–∑–∏–Ω–µ', '–æ –º–∞–≥–∞–∑–∏–Ω–µ']
# @user_private_router.message(or_f(Command('about'), (F.text == '–û –º–∞–≥–∞–∑–∏–Ω–µ'), (F.text == '–æ –º–∞–≥–∞–∑–∏–Ω–µ')))
# –ø—Ä–∞–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
@user_private_router.message(or_f(Command('about'), (F.text.in_(mag))))
# @user_private_router.message(Command('about'))
async def about_cmd(message: types.Message):
    cons(message.text)
    await message.answer('–û –Ω–∞—Å:')

@user_private_router.message(F.text.lower() == '–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã')
@user_private_router.message(Command('payment'))
async def payment_cmd(message: types.Message):

    text = as_marked_section(
        Bold('–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:'),
        '–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ',
        '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∞/–∫–µ—à',
        '–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏',
        marker='üíé'
    )
    await message.answer(text.as_html())
    # parse_mode=ParseMode.HTML —É–∫–∞–∑—ã–≤–∞–µ–º –≤ Dispatcher()
    await message.answer('<i>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</i>')                    # italic
    await message.answer('<s>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</s>')                    # –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π
    await message.answer('<em>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</em>')                  # italic
    await message.answer('<code>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</code>')              # —Å—Ç–∏–ª—å –∫–æ–¥–∞
    await message.answer('<pre>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</pre>')                # –æ—Ç–≤–µ—Ç
    await message.answer('<blockquote>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</blockquote>')  # —Ü–∏—Ç–∞—Ç–∞ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
    await message.answer('<strong>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</strong>')          # bold
    await message.answer('<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>')                    # bold
    await message.answer('<ins>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</ins>')                # –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π

# —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
@user_private_router.message((F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫')) | (F.text.lower() == '–≤–∞—Ä–∏–∞–Ω—Ç—ã'))
@user_private_router.message(Command('shipping'))
async def shipping_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold('–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–∑–∞–∫–∞–∑–∞:'),
            '–ö—É—Ä—å–µ—Ä',
            '–°–∞–º–æ–≤—ã–Ω–æ—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É –∑–∞–±–µ—Ä—É)',
            '–ü–æ–∫—É—à–∞—é —É –≤–∞—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É)',
            marker='üçè'
        ),
        as_marked_section(
            Bold('–ù–µ–ª—å–∑—è:'),
            '–ü–æ—á—Ç–∞',
            '–ì–æ–ª—É–±–∏',
            marker='‚ùå'
        ),
        sep='\n_______________________________________\n'
    )
    await message.answer(text.as_html())

# # –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: .photo, .audio –∏ —Ç–¥, —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å ',' - –∏, '|' - –∏–ª–∏, '&' - –∏
# @user_private_router.message((F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫')) | (F.text.lower() == '–≤–∞—Ä–∏–∞–Ω—Ç—ã'))
# async def shipping_cmd(message: types.Message):
#     await message.answer('–≠—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä!')

# –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –≤—Å—ë —á—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä
# @user_private_router.message(~(F.text.lower().contains('–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏')))

# –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: .photo, .audio –∏ —Ç–¥
@user_private_router.message(F.text.lower().contains('–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏'))
async def shipping_cmd(message: types.Message):
    await message.answer('<s>–≠—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä2!</s>')

# –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@user_private_router.message(F.text.lower().contains('–∫–æ–Ω—Ç–∞–∫—Ç—ã'))
async def get_menu_contacts(message: types.Message):
    await message.answer('–ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üéõ', reply_markup=test_kb)

@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f'–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω')
    await message.answer(str(message.contact))
    cons(message.contact)

@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f'–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞')
    await message.answer(str(message.location))
    cons(message.location)

# # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ö—ç–Ω–¥–ª–µ—Ä –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ –≤ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –±–æ—Ç–∞, —á–µ—Ä–µ–∑ bot. - –º–æ–∂–Ω–æ
# # –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã, bot - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –≤ –ø—Ä–æ–∫—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤
# @user_private_router.message()
# async def echo(message: types.Message):
#     text = message.text
#
#     # if text in ['–ü—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello']:
#     #     await message.answer('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!')
#     # elif text in ['–ü–æ–∫–∞', '–ø–æ–∫–µ–¥–∞', '–ø–æ–∫–∞', '–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è']:
#     #     await message.answer('–ò —Ç–µ–±–µ –ø–æ–∫–∞!')
#     # else:
#     #     await message.answer(f'{message.chat.username} —Å–∞–º —Ç–∞–∫–æ–π - "{message.text}"!')
#
#     # await bot.send_message(message.from_user.id, '–û—Ç–≤–µ—Ç')
#     await  message.answer(message.text)
#     # –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞ (—Ü–∏—Ç–∞—Ç–∞)
#     await  message.reply(message.text)
#