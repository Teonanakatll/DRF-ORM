from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

############   CallbackQuery ‚Äî —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –±–æ—Ç—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —Å
############   callback_data –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.

# –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
# –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Ö –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ _ —Ç–æ –Ω–∏ –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–æ–π)
from gpt4.utils import cons


class MenuCallBack(CallbackData, prefix='menu'):
    level: int
    menu_name: str
    # –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è int/None –∏ None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    category: int | None = None
    page: int = 1
    product_id: int | None = None


# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
def get_user_main_btns(*, level: int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–¢–æ–≤–∞—Ä—ã üçï": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å ‚ÑπÔ∏è": "about",
        "–û–ø–ª–∞—Ç–∞ üí∞": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ ‚õµ": "shipping",
    }
    for text, menu_name in btns.items():
        # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ callback_data –∑–∞–ø–∏—Å—ã–≤–∞–µ–º level –º–µ–Ω—é –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –≤–µ–¥—ë—Ç
        if menu_name == 'catalog':
            keyboard.add(InlineKeyboardButton(text=text,
                    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
# –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É: –ú–µ—Ç–æ–¥ pack() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ MenuCallBack –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
# key1:value1|key2:value2. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ callback_data –≤ Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É
# (—Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 64 –±–∞–π—Ç), –∞ –Ω–µ –æ–±—ä–µ–∫—Ç.
                    callback_data=MenuCallBack(level=level+1, menu_name=menu_name).pack()))
        elif menu_name == 'cart':
            # –µ—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ add() –∞ Button —Ç–æ –≤ pack() –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–∞–º –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(level=3, menu_name=menu_name).pack()))
        else:
            # –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –º—ã –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º–∂–µ 0 —É—Ä–æ–≤–Ω–µ –º–µ–Ω—é
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(level=level, menu_name=menu_name).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
            callback_data=MenuCallBack(level=level-1, menu_name='main').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
            callback_data=MenuCallBack(level=3, menu_name='cart').pack()))

    for c in categories:
        keyboard.add(InlineKeyboardButton(text=c.name,
                callback_data=MenuCallBack(level=level+1, menu_name=c.name, category=c.id).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(
        *,
        level: int,
        category: int,
        page: int,
        pagination_btns: dict,  # –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è
        product_id: int,        # –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ –∫—É–ø–∏—Ç—å
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
            callback_data=MenuCallBack(level=level-1, menu_name='catalog').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
            callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    # –Ω–µ–±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É, add_to_cart - —Ç—Ä–∏–≥–≥–µ—Ä
    # –ø–æ –∫–∞—Ç–æ—Ä–∞–º—É –º—ã –±—É–¥–µ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
    keyboard.add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å üíµ',
            callback_data=MenuCallBack(level=level, menu_name='add_to_cart', product_id=product_id).pack()))

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == 'next':
            row.append(InlineKeyboardButton(text=text,
                        callback_data=MenuCallBack(
                            level=level,
                            menu_name=menu_name,
                            category=category,
                            page=page + 1).pack()))

        elif menu_name == 'previous':
            row.append(InlineKeyboardButton(text=text,
                        callback_data=MenuCallBack(
                            level=level,
                            menu_name=menu_name,
                            category=category,
                            page=page - 1).pack()))

    return keyboard.row(*row).as_markup()




def get_callback_btns(
    # * - –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Ä–∞–º–µ—Ç—Ä–æ–≤
    *,
    # —Å–ª–æ–≤–∞—Ä–∏ btns –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ö–õ–Æ–ß–û–ú —Å–ª–æ–≤–∞—Ä—è - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –ó–ù–ê–ß–ï–ù–ò–ï–ú —Å–ª–æ–≤–∞—Ä—è - id –∑–∞–ø–∏—Å–∏ Product –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç
    # –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä callback_data
    btns: dict[str, str],
    sizes: type[int] = (2,)):

    keyboard = InlineKeyboardBuilder()
    # –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º text-–Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∏, –∞ data-–ø–∞—Ä–∞–º–µ—Ç—Ä—É callback_data
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


def get_user_cart(
        *,
        level: int,
        page: int | None,
        pagination_btns: dict | None,
        product_id: int | None,
        sizes: type[int] = (3,)
):
    keyboard = InlineKeyboardBuilder()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if page:
        cons('get_user_cart()', product_id)
        keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                  callback_data=MenuCallBack(level=level, menu_name='delete', product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='-1',
                  callback_data=MenuCallBack(level=level, menu_name='decrement', product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='+1',
                  callback_data=MenuCallBack(level=level, menu_name='increment', product_id=product_id, page=page).pack()))

        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in pagination_btns.items():
            if menu_name == 'next':
                row.append(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(level=level, menu_name=menu_name, page=page + 1).pack()))
            elif menu_name == 'previous':
                row.append(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(level=level, menu_name=menu_name, page=page - 1).pack()))

        keyboard.row(*row)

        row2 = [
            InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                        callback_data=MenuCallBack(level=0, menu_name='main').pack()),
            InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å',
                        callback_data=MenuCallBack(level=0, menu_name='order').pack()),
        ]
        return keyboard.row(*row2).as_markup()

    # –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É - –ù–∞ –≥–ª–∞–≤–Ω—É—é
    else:
        keyboard.add(InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                    callback_data=MenuCallBack(level=0, menu_name='main').pack()))

        return keyboard.adjust(*sizes).as_markup()


######################## –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä—ã

# –∫–ª–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Å—ã–ª–∫–∞–º–∏
def get_url_btns(
    *,
    btns: dict[str, str],
    sizes: tuple[int] = (2,)):

    keyboard = InlineKeyboardBuilder()

    for text, url in btns.items():

        keyboard.add(InlineKeyboardButton(text=text, url=url))

    return keyboard.adjust(*sizes).as_markup()

# –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏—Ö id –∏ –∫–Ω–æ–ø–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏
def get_url_btns(
    *,
    btns: dict[str, str],
    sizes: tuple[int] = (2,)):

    keyboard = InlineKeyboardBuilder()

    for text, value in btns.items():
        if '://' in value:
            keyboard.add(InlineKeyboardButton(text=text, url=value))
        else:
            keyboard.add(InlineKeyboardButton(text=text, callback_data=value))

    return keyboard.adjust(*sizes).as_markup()
